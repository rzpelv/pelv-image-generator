import React from 'react';

interface ImageDisplayProps {
  imageUrls: string[] | null;
  isLoading: boolean;
  onDownload: (url: string) => void;
  onImageClick: (url: string) => void;
}

const Placeholder = () => (
    <div className="flex flex-col items-center justify-center h-full text-gray-500">
         <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="1" strokeLinecap="round" strokeLinejoin="round" className="text-gray-600 mb-4">
            <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
            <circle cx="8.5" cy="8.5" r="1.5"></circle>
            <polyline points="21 15 16 10 5 21"></polyline>
        </svg>
        <h3 className="text-xl font-semibold">Your Image Will Appear Here</h3>
        <p className="mt-1 text-sm">Enter a prompt and click "Generate Image" to start.</p>
    </div>
);


const Spinner = () => (
    <div className="flex items-center justify-center h-full">
        <div className="w-16 h-16 border-4 border-dashed rounded-full animate-spin border-indigo-500"></div>
    </div>
);

const DownloadIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
        <path fillRule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clipRule="evenodd" />
    </svg>
);


export const ImageDisplay: React.FC<ImageDisplayProps> = ({ imageUrls, isLoading, onDownload, onImageClick }) => {
  return (
    <div className="w-full h-full min-h-[400px] lg:min-h-0 bg-gray-800 rounded-lg border-2 border-dashed border-gray-600 flex items-center justify-center p-4">
        {isLoading ? (
          <Spinner />
        ) : imageUrls && imageUrls.length > 0 ? (
          <div className={`w-full grid gap-4 ${imageUrls.length > 1 ? 'grid-cols-2' : 'grid-cols-1'}`}>
            {imageUrls.map((url, index) => (
              <div key={index} className="relative group aspect-square">
                 <button
                    onClick={() => onImageClick(url)}
                    className="w-full h-full block rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-indigo-500"
                    aria-label={`View image ${index + 1} fullscreen`}
                  >
                    <img
                      src={url}
                      alt={`Generated by AI ${index + 1}`}
                      className="w-full h-full object-contain rounded-md shadow-lg cursor-zoom-in animate-fade-in"
                    />
                 </button>
                <button
                  onClick={() => onDownload(url)}
                  className="absolute top-2 right-2 z-10 bg-black bg-opacity-60 text-white p-2 rounded-full hover:bg-opacity-80 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-indigo-500 transition-all opacity-0 group-hover:opacity-100"
                  aria-label={`Download image ${index + 1}`}
                >
                  <DownloadIcon />
                </button>
              </div>
            ))}
          </div>
        ) : (
          <Placeholder />
        )}
      <style>{`
        @keyframes fadeIn {
          from { opacity: 0; transform: scale(0.95); }
          to { opacity: 1; transform: scale(1); }
        }
        .animate-fade-in {
          animation: fadeIn 0.5s ease-in-out;
        }
      `}</style>
    </div>
  );
};